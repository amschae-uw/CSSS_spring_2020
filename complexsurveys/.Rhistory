data = samp)
nhanes<-read.dta("nhanesbp.dta",
convert.dates = TRUE,
convert.factors = TRUE,
missing.type = FALSE,
convert.underscore = FALSE,
warn.missing.labels = TRUE)
#this dataset has 11140 obs of 45 vars.
# https://wwwn.cdc.gov/nchs/nhanes/Search/variablelist.aspx?Component=Questionnaire
nhanes
design<- svydesign(id=~SDMVPSU, weight=~fouryearwt, strata=~SDMVSTRA, data=nhanes, nest = FALSE, check.strata = FALSE)
head(nhanes)
'
library(nhanes)
data(NHANES)
str(NHANES)
'
design
design
confint(svymean(nhanes$BPXSAR, na.rm=TRUE, design, ci=TRUE), level = .95))
confint(svymean(nhanes$BPXSAR, na.rm=TRUE, design, ci=TRUE), level = .95)
confint(svymean(nhanes$BPXSAR, na.rm=TRUE, design, ci=TRUE), level = .95)
confint(svymean(nhanes$BPXSAR, na.rm=TRUE, design)
confint(svymean(nhanes$BPXSAR, na.rm=TRUE, design))
confint(svymean(nhanes$BPXSAR, design, na.rm=TRUE))
confint(svymean(~BPXSAR, design, na.rm=TRUE))
svyquantile(~BPXSAR, design, c(.5), na.rm=TRUE, ci=TRUE)
svyquantile(~BPXSAR, design, c(.5), na.rm=TRUE)
confint(svyquantile(~BPXSAR, design, c(.5), na.rm=TRUE))
confint(svymean(~BPXSAR, design=design, na.rm=TRUE))
svymean(~BPXSAR, design, na.rm=TRUE)
svymean(~BPXSAR, design=design, na.rm=TRUE)
svyquantile(~BPXSAR, design, c(.5), na.rm=TRUE)
confint(svyquantile(~BPXSAR, design, c(.5), na.rm=TRUE))
confint(svyquantile(~BPXSAR, design, c(.5), na.rm=TRUE, ci=TRUE))
svyciprop(~I(nhanes$BPQ020==1), design = design)
svyciprop(~I(BPQ020==1), design = design)
svyciprop(~I(BPQ020==1), design = design, na.rm=TRUE)
svyciprop(~I(DR1TSODI>2.4), design = design, na.rm=TRUE)
nhanes$DR1TSODI
svyciprop(~I(DR1TSODI>2400), design = design, na.rm=TRUE)
svymean(DR1TSODI, design = design, na.rm=TRUE)
svymean(~DR1TSODI, design = design, na.rm=TRUE)
~I(DR1TSODI>2400), design = design, na.rm=TRUE
(~I(DR1TSODI>2400), design = design, na.rm=TRUE)
svytotal(~nhanes$BPQ020=1, design, na.rm=TRUE)
svytotal(~nhanes$BPQ020==1, design, na.rm=TRUE)
svytotal(~nhanes$BPQ020==1, design=design, na.rm=TRUE)
svytotal(~nhanes$BPQ020==1, design=design, na.rm=TRUE)
confint(svytotal(~nhanes$BPQ020==1, design=design, na.rm=TRUE))
svymean(~DR1TSODI, design = design, na.rm=TRUE)
confint(svymean(~DR1TSODI, design = design, na.rm=TRUE))
svymean(~DR1TSODI, design = design, na.rm=TRUE)
confint(svymean(~DR1TSODI, design = design, na.rm=TRUE))
svymean(nhanes$BPXSAR ~ nhanes$RIAGENDR)
svymean(nhanes$BPXSAR ~ nhanes$RIAGENDR, design=design)
svymean(nhanes$BPXSAR ~ nhanes$RIAGENDR, design=design, na.rm=TRUE)
svyby(~RIAGENDR, ~BPXSAR, design=design, svymean)
svyby(~BPXSAR, ~RIAGENDR,  design=design, svymean)
svyby(~BPXSAR, ~RIAGENDR,  design=design, na.rm=TRUE svymean)
svyby(~BPXSAR, ~RIAGENDR,  design=design, na.rm=TRUE, svymean)
confint(svyby(~BPXSAR, ~RIAGENDR,  design=design, na.rm=TRUE, svymean))
svymean(~DR1TSODI, design = design, na.rm=TRUE)
confint(svymean(~DR1TSODI, design = design, na.rm=TRUE))
svyquantile(~DR1TSODI, design, c(.5), na.rm=TRUE)
confint(svyquantile(~DR1TSODI, design, c(.5), na.rm=TRUE, ci=TRUE))
nhanes$DR1TSODI
svymean(~DR1TSODI, design = design, na.rm=TRUE)
svyciprop(~I(DR1TSODI>2400), design = design, na.rm=TRUE)
samp
summary(samp)
set.seed(2000)
strat_rows <- stratsample(apipop$stype,
counts=c(E=200,
M=100,
H=50))
samp <- apipop[strat_rows,]
summary(samp)
dim(samp)
confint(svyquantile(~BPXSAR, design, c(.5), na.rm=TRUE, ci=TRUE), na.rm=TRUE)
confint(svyquantile(~DR1TSODI, design, c(.5), na.rm=TRUE, ci=TRUE))
ciprop(svyquantile(~BPXSAR, design, c(.5), na.rm=TRUE, ci=TRUE))
svyquantile(~BPXSAR, design, c(.5), na.rm=TRUE, ci=TRUE))
svyquantile(~BPXSAR, design, c(.5), na.rm=TRUE, ci=TRUE)
ciprop(svyquantile(~BPXSAR, design, c(.5), na.rm=TRUE)
ciprop(svyquantile(~BPXSAR, design, c(.5), na.rm=TRUE))
svyciprop(svyquantile(~BPXSAR, design, c(.5), na.rm=TRUE))
confint(svyquantile(~BPXSAR, design, c(.5), na.rm=TRUE))
confint(svyquantile(~BPXSAR, design, c(.5), na.rm=TRUE, ci=TRUE))
svyciprop(~I(DR1TSODI>2400), design = design, na.rm=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(survey)
library(foreign)
library(dplyr)
mutate(nhanes, sodium =ifelse(nhanes$DR1TSODI>2400, 1,0))
svyciprop(~I(sodium>2400), design = design, na.rm=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(survey)
library(foreign)
library(dplyr)
data(api)
set.seed(2000)
apipop$nschools <- nrow(apipop)
sample_rows <- sample(1:nrow(apipop), 350)
api_srs <- apipop[sample_rows,]
dim(api_srs)
srsdesign <- svydesign(id=~snum, fpc=~nschools, data=api_srs)
svytotal(~enroll,design=srsdesign, na.rm=TRUE)
set.seed(2000)
strat_rows <- stratsample(apipop$stype,
counts=c(E=200,
M=100,
H=50))
samp <- apipop[strat_rows,]
dim(samp)
summary(samp$stype)
n <- summary(samp$stype)
summary(apipop$stype)
N <- summary(apipop$stype)
n/N
N/n
unique(apistrat$pw)
samp$fpc <- samp$weights <- NA
samp$fpc[samp$stype == "E"] <- N[1]
samp$fpc[samp$stype == "H"] <- N[2]
samp$fpc[samp$stype == "M"] <- N[3]
samp$weights[samp$stype == "E"] <- (N/n)[1]
samp$weights[samp$stype == "H"] <- (N/n)[2]
samp$weights[samp$stype == "M"] <- (N/n)[3]
stratdesign <- svydesign(id = ~1,
strata = ~stype,
weights = ~weights,
fpc = ~fpc,
data = samp)
stratdesign
svytotal(~enroll,design=stratdesign, na.rm=TRUE)
nhanes<-read.dta("nhanesbp.dta",
convert.dates = TRUE,
convert.factors = TRUE,
missing.type = FALSE,
convert.underscore = FALSE,
warn.missing.labels = TRUE)
#this dataset has 11140 obs of 45 vars.
# https://wwwn.cdc.gov/nchs/nhanes/Search/variablelist.aspx?Component=Questionnaire
# all relevant variables must exist at the time of specifying survey deisgn, so creating this high/low sodium var here:
mutate(nhanes, sodium =ifelse(nhanes$DR1TSODI>2400, 1,0))
design<- svydesign(id=~SDMVPSU,
weight=~fouryearwt,
strata=~SDMVSTRA,
data=nhanes,
nest = FALSE,
check.strata = FALSE)
design
svymean(~BPXSAR, design=design, na.rm=TRUE)
confint(svymean(~BPXSAR, design=design, na.rm=TRUE))
svyquantile(~BPXSAR, design, c(.5), na.rm=TRUE)
confint(svyquantile(~BPXSAR, design, c(.5), na.rm=TRUE, ci=TRUE))
# I am not sure why NAs were produced here! I specified that they should be removed.
#yes-1
#no-2
#refused-7
#DK-9
svytotal(~nhanes$BPQ020==1, design=design, na.rm=TRUE)
confint(svytotal(~nhanes$BPQ020==1, design=design, na.rm=TRUE))
svyby(~BPXSAR, ~RIAGENDR,  design=design, na.rm=TRUE, svymean)
confint(svyby(~BPXSAR, ~RIAGENDR,  design=design, na.rm=TRUE, svymean))
svymean(~DR1TSODI, design = design, na.rm=TRUE)
confint(svymean(~DR1TSODI, design = design, na.rm=TRUE))
svyquantile(~DR1TSODI, design, c(.5), na.rm=TRUE)
confint(svyquantile(~DR1TSODI, design, c(.5), na.rm=TRUE, ci=TRUE))
knitr::opts_chunk$set(echo = TRUE)
library(survey)
library(foreign)
library(dplyr)
data(api)
set.seed(2000)
apipop$nschools <- nrow(apipop)
sample_rows <- sample(1:nrow(apipop), 350)
api_srs <- apipop[sample_rows,]
dim(api_srs)
srsdesign <- svydesign(id=~snum, fpc=~nschools, data=api_srs)
svytotal(~enroll,design=srsdesign, na.rm=TRUE)
set.seed(2000)
strat_rows <- stratsample(apipop$stype,
counts=c(E=200,
M=100,
H=50))
samp <- apipop[strat_rows,]
dim(samp)
summary(samp$stype)
n <- summary(samp$stype)
summary(apipop$stype)
N <- summary(apipop$stype)
n/N
N/n
unique(apistrat$pw)
samp$fpc <- samp$weights <- NA
samp$fpc[samp$stype == "E"] <- N[1]
samp$fpc[samp$stype == "H"] <- N[2]
samp$fpc[samp$stype == "M"] <- N[3]
samp$weights[samp$stype == "E"] <- (N/n)[1]
samp$weights[samp$stype == "H"] <- (N/n)[2]
samp$weights[samp$stype == "M"] <- (N/n)[3]
stratdesign <- svydesign(id = ~1,
strata = ~stype,
weights = ~weights,
fpc = ~fpc,
data = samp)
stratdesign
svytotal(~enroll,design=stratdesign, na.rm=TRUE)
nhanes<-read.dta("nhanesbp.dta",
convert.dates = TRUE,
convert.factors = TRUE,
missing.type = FALSE,
convert.underscore = FALSE,
warn.missing.labels = TRUE)
#this dataset has 11140 obs of 45 vars.
# https://wwwn.cdc.gov/nchs/nhanes/Search/variablelist.aspx?Component=Questionnaire
# all relevant variables must exist at the time of specifying survey deisgn, so creating this high/low sodium var here:
mutate(nhanes, sodium =ifelse(nhanes$DR1TSODI>2400, 1,0))
design<- svydesign(id=~SDMVPSU,
weight=~fouryearwt,
strata=~SDMVSTRA,
data=nhanes,
nest = FALSE,
check.strata = FALSE)
design
svymean(~BPXSAR, design=design, na.rm=TRUE)
confint(svymean(~BPXSAR, design=design, na.rm=TRUE))
svyquantile(~BPXSAR, design, c(.5), na.rm=TRUE)
confint(svyquantile(~BPXSAR, design, c(.5), na.rm=TRUE, ci=TRUE))
# I am not sure why NAs were produced here! I specified that they should be removed.
#yes-1
#no-2
#refused-7
#DK-9
svytotal(~nhanes$BPQ020==1, design=design, na.rm=TRUE)
confint(svytotal(~nhanes$BPQ020==1, design=design, na.rm=TRUE))
svyby(~BPXSAR, ~RIAGENDR,  design=design, na.rm=TRUE, svymean)
confint(svyby(~BPXSAR, ~RIAGENDR,  design=design, na.rm=TRUE, svymean))
svymean(~DR1TSODI, design = design, na.rm=TRUE)
confint(svymean(~DR1TSODI, design = design, na.rm=TRUE))
svyquantile(~DR1TSODI, design, c(.5), na.rm=TRUE)
confint(svyquantile(~DR1TSODI, design, c(.5), na.rm=TRUE, ci=TRUE))
svyciprop(~I(sodium>2400), design = design, na.rm=TRUE)
nhanes<-read.dta("nhanesbp.dta",
convert.dates = TRUE,
convert.factors = TRUE,
missing.type = FALSE,
convert.underscore = FALSE,
warn.missing.labels = TRUE)
#this dataset has 11140 obs of 45 vars.
# https://wwwn.cdc.gov/nchs/nhanes/Search/variablelist.aspx?Component=Questionnaire
# all relevant variables must exist at the time of specifying survey deisgn, so creating this high/low sodium var here:
mutate(nhanes, sodium =ifelse(nhanes$DR1TSODI>2400, 1,0))
design<- svydesign(id=~SDMVPSU,
weight=~fouryearwt,
strata=~SDMVSTRA,
data=nhanes,
nest = FALSE,
check.strata = FALSE)
design
mutate(nhanes, sodium =ifelse(nhanes$DR1TSODI>2400, 1,0))
summary(sodium)
summary(nhanes$sodium)
mutate(nhanes, sodium =ifelse(nhanes$DR1TSODI>2400, 1,0))
dim(nhanes$sodium)
str(nhanes$sodium)
nhanes$sodium<-mutate(nhanes, sodium =ifelse(nhanes$DR1TSODI>2400, 1,0))
str(nhanes$sodium)
nhanes$sodium<-mutate(nhanes,ifelse(nhanes$DR1TSODI>2400, 1,0))
---
title: "Homework 1"
author: "Alex Schaefer"
date: "4/21/2020"
output: pdf_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(survey)
library(foreign)
library(dplyr)
```
1. **Systematic Sampling** Recall, the four necessary properties of a probability sample are as follows:
Property 1 is about every individual in the population having a non-zero probability to end up in the sample;
Property 2 says that sampling probabilities for every individual are known;
Property 3 is about every pair of individuals in the population having a non-zero probability to end up in the sample;
Property 4 says that pairwise sampling probabilities are known for every pair of individuals.
*  (5 points) Imagine systematic sampling that involves taking a list of the population and choosing, for example, every 100th entry in the list. Which of the necessary properties of a probability sample does this procedure have? Explain.
**In this case, it is hard to say whether the properties of a probability sample are present because we do not know whether the list is ordered in some way, and it doesn't appear as though the starting point is random.**
**Requirement 1: It is possible that the 1st item in the list does not have a chance of getting chosen if every 100 are picked NOT starting starting in a random place, making me question whether this method fills the first property.**
**Requirement 2: Because we seem to be starting with the top of the list and working our way down, but we don't know the size of the population or of the overall sample, and it isn't mentioned that we are starting in a randomly-selected place, it doesn't seem that we know the sampling probability of every individual unless we know where each person falls in the list (probably of 1 if they are person 100, 200, 300, etc, probability 0 if they are anyone else).**
**Requirement 3: Unless we sample every observation using this method, or at least go through the population twice, it seems to me that this criterion is not met because two observations right next to each other cannot be sampled. **
**Requirement 4: I do not think we know the sampling probability of any one observation (unless there is a randomly-assigned starting point and we know that our sample is large enough to get through the list of individuals one time), which means we don't know the pairwise sampling probabilities either. **
*  (5 points) Imagine systematic sampling with multiple random starts where we choose 5 random starting points) in 1, 2, $\ldots$, 500 and take every 500th entry starting from each of the 5 random points). Which of the necessary properties of a probability sample does this procedure have? Explain.
**This procedure appears to satisfy the conditions of each observation having a chance at getting into the sample, as well as every pair having a non-zero chance at being selected, because we are starting at a random place in the list and choosing multiple random starting places, so there is a shot for consecutive individuals to be drawn. In this case, because there is randomness in where the starting points are, it seems that we know that there is a 5/500 chance for every individual in the population to be drawn, and that we also know the pairwise sampling probabilities. **
*  (5 points) In what situations treating a systematic sample as if it were a simple random sample would give good results? Provide example(s and explain.
**If we know that the individuals we are trying to sample are not arranged in a pattern that could affect our results, then the results of this type of procedure could be treated as though they were a SRS. If on the other hand, for example, we are drawing every 100th individual from a list of students ordered first by school (let's say the schools usually have around 100 students in them) and then by class ranking, and then try to make inferences about the grades, our systematic sampling might have yielded biased results because we might have selected students that were always at the high or low ends of their classes. **
2.  Using the California API data...
```{r include=FALSE}
data(api)
```
*  (5 points) Draw a simple random sample of size 350 from the population file and estimate
the total enrollment in California schools and its standard error.
```{r echo=TRUE}
set.seed(2000)
apipop$nschools <- nrow(apipop)
sample_rows <- sample(1:nrow(apipop), 350)
api_srs <- apipop[sample_rows,]
dim(api_srs)
srsdesign <- svydesign(id=~snum, fpc=~nschools, data=api_srs)
```
**The survey total and SE from this sample was: **
```{r echo=TRUE}
svytotal(~enroll,design=srsdesign, na.rm=TRUE)
```
*  (10 points) Draw a stratified random sample of 200 elementary schools, 100 middle schools, and 50 high schools. Estimate the total enrollment in California schools and its
standard error.
```{r echo=TRUE}
set.seed(2000)
strat_rows <- stratsample(apipop$stype,
counts=c(E=200,
M=100,
H=50))
samp <- apipop[strat_rows,]
dim(samp)
```
```{r echo=TRUE}
summary(samp$stype)
n <- summary(samp$stype)
summary(apipop$stype)
N <- summary(apipop$stype)
n/N
N/n
unique(apistrat$pw)
samp$fpc <- samp$weights <- NA
samp$fpc[samp$stype == "E"] <- N[1]
samp$fpc[samp$stype == "H"] <- N[2]
samp$fpc[samp$stype == "M"] <- N[3]
samp$weights[samp$stype == "E"] <- (N/n)[1]
samp$weights[samp$stype == "H"] <- (N/n)[2]
samp$weights[samp$stype == "M"] <- (N/n)[3]
stratdesign <- svydesign(id = ~1,
strata = ~stype,
weights = ~weights,
fpc = ~fpc,
data = samp)
stratdesign
```
** The survey total and SE from this sample was: **
```{r echo=TRUE}
svytotal(~enroll,design=stratdesign, na.rm=TRUE)
```
*  (5 points) Why is the stratified estimate more precise?
**There are a few reasons that the stratified sample should be more precise. A big one is that the schools within each stratum are more homogenous than the population of schools overall, and using a variance which is lower within each stratum than the population gives us a lower variance and greater precision overall. **
3. Using the NHANES blood pressure data on the class website, give estimates and
confidence intervals for:
```{r echo=TRUE}
nhanes<-read.dta("nhanesbp.dta",
convert.dates = TRUE,
convert.factors = TRUE,
missing.type = FALSE,
convert.underscore = FALSE,
warn.missing.labels = TRUE)
#this dataset has 11140 obs of 45 vars.
# https://wwwn.cdc.gov/nchs/nhanes/Search/variablelist.aspx?Component=Questionnaire
# all relevant variables must exist at the time of specifying survey deisgn, so creating this high/low sodium var here:
nhanes$sodium<-mutate(nhanes,ifelse(nhanes$DR1TSODI>2400, 1,0))
nhanes$sodium<-as.numeric(mutate(nhanes,ifelse(nhanes$DR1TSODI>2400, 1,0)))
dim(nhanes$sodium)
summary(nhanes$sodium)
summary(nhanes)
nhanes$sodium <- NA
nhanes$sodium <- 0
nhanes$sodium<-mutate(nhanes$sodium,ifelse(nhanes$DR1TSODI>2400, 1,0))
nhanes$sodium<-mutate(nhanes$sodium,ifelse(nhanes$DR1TSODI>2400, 1,0))
nhanes$sodium<-mutate(nhanes, sodium= ifelse(nhanes$DR1TSODI>2400, 1, 0))
summary(nhanes$sodium)
knitr::opts_chunk$set(echo = TRUE)
library(survey)
library(foreign)
library(dplyr)
data(api)
set.seed(2000)
apipop$nschools <- nrow(apipop)
sample_rows <- sample(1:nrow(apipop), 350)
api_srs <- apipop[sample_rows,]
dim(api_srs)
srsdesign <- svydesign(id=~snum, fpc=~nschools, data=api_srs)
svytotal(~enroll,design=srsdesign, na.rm=TRUE)
set.seed(2000)
strat_rows <- stratsample(apipop$stype,
counts=c(E=200,
M=100,
H=50))
samp <- apipop[strat_rows,]
dim(samp)
summary(samp$stype)
n <- summary(samp$stype)
summary(apipop$stype)
N <- summary(apipop$stype)
n/N
N/n
unique(apistrat$pw)
samp$fpc <- samp$weights <- NA
samp$fpc[samp$stype == "E"] <- N[1]
samp$fpc[samp$stype == "H"] <- N[2]
samp$fpc[samp$stype == "M"] <- N[3]
samp$weights[samp$stype == "E"] <- (N/n)[1]
samp$weights[samp$stype == "H"] <- (N/n)[2]
samp$weights[samp$stype == "M"] <- (N/n)[3]
stratdesign <- svydesign(id = ~1,
strata = ~stype,
weights = ~weights,
fpc = ~fpc,
data = samp)
stratdesign
svytotal(~enroll,design=stratdesign, na.rm=TRUE)
nhanes<-read.dta("nhanesbp.dta",
convert.dates = TRUE,
convert.factors = TRUE,
missing.type = FALSE,
convert.underscore = FALSE,
warn.missing.labels = TRUE)
#this dataset has 11140 obs of 45 vars.
# https://wwwn.cdc.gov/nchs/nhanes/Search/variablelist.aspx?Component=Questionnaire
# all relevant variables must exist at the time of specifying survey deisgn, so creating this high/low sodium var here:
nhanes$sodium <- 0
nhanes$sodium<-mutate(nhanes, sodium= ifelse(nhanes$DR1TSODI>2400, 1, 0))
nhanes$sodium<-mutate(nhanes, sodium= ifelse(DR1TSODI>2400, 1, 0))
nhanes<-mutate(nhanes, sodium= ifelse(DR1TSODI>2400, 1, 0))
svymean(~sodium, design = design, na.rm=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(survey)
library(foreign)
library(dplyr)
data(api)
set.seed(2000)
apipop$nschools <- nrow(apipop)
sample_rows <- sample(1:nrow(apipop), 350)
api_srs <- apipop[sample_rows,]
dim(api_srs)
srsdesign <- svydesign(id=~snum, fpc=~nschools, data=api_srs)
svytotal(~enroll,design=srsdesign, na.rm=TRUE)
set.seed(2000)
strat_rows <- stratsample(apipop$stype,
counts=c(E=200,
M=100,
H=50))
samp <- apipop[strat_rows,]
dim(samp)
summary(samp$stype)
n <- summary(samp$stype)
summary(apipop$stype)
N <- summary(apipop$stype)
n/N
N/n
unique(apistrat$pw)
samp$fpc <- samp$weights <- NA
samp$fpc[samp$stype == "E"] <- N[1]
samp$fpc[samp$stype == "H"] <- N[2]
samp$fpc[samp$stype == "M"] <- N[3]
samp$weights[samp$stype == "E"] <- (N/n)[1]
samp$weights[samp$stype == "H"] <- (N/n)[2]
samp$weights[samp$stype == "M"] <- (N/n)[3]
stratdesign <- svydesign(id = ~1,
strata = ~stype,
weights = ~weights,
fpc = ~fpc,
data = samp)
stratdesign
svytotal(~enroll,design=stratdesign, na.rm=TRUE)
nhanes<-read.dta("nhanesbp.dta",
convert.dates = TRUE,
convert.factors = TRUE,
missing.type = FALSE,
convert.underscore = FALSE,
warn.missing.labels = TRUE)
#this dataset has 11140 obs of 45 vars.
# https://wwwn.cdc.gov/nchs/nhanes/Search/variablelist.aspx?Component=Questionnaire
# all relevant variables must exist at the time of specifying survey deisgn, so creating this high/low sodium var here:
nhanes<-mutate(nhanes, sodium= ifelse(DR1TSODI>2400, 1, 0))
summary(nhanes$sodium)
design<- svydesign(id=~SDMVPSU,
weight=~fouryearwt,
strata=~SDMVSTRA,
data=nhanes,
nest = FALSE,
check.strata = FALSE)
design
svymean(~BPXSAR, design=design, na.rm=TRUE)
confint(svymean(~BPXSAR, design=design, na.rm=TRUE))
svyquantile(~BPXSAR, design, c(.5), na.rm=TRUE)
confint(svyquantile(~BPXSAR, design, c(.5), na.rm=TRUE, ci=TRUE))
# I am not sure why NAs were produced here! I specified that they should be removed.
#yes-1
#no-2
#refused-7
#DK-9
svytotal(~nhanes$BPQ020==1, design=design, na.rm=TRUE)
confint(svytotal(~nhanes$BPQ020==1, design=design, na.rm=TRUE))
svyby(~BPXSAR, ~RIAGENDR,  design=design, na.rm=TRUE, svymean)
confint(svyby(~BPXSAR, ~RIAGENDR,  design=design, na.rm=TRUE, svymean))
svymean(~DR1TSODI, design = design, na.rm=TRUE)
confint(svymean(~DR1TSODI, design = design, na.rm=TRUE))
svyquantile(~DR1TSODI, design, c(.5), na.rm=TRUE)
confint(svyquantile(~DR1TSODI, design, c(.5), na.rm=TRUE, ci=TRUE))
svymean(~sodium, design = design, na.rm=TRUE)
svyciprop(~I(~sodium), design = design, na.rm=TRUE)
svyciprop(~I(~sodium==1), design = design, na.rm=TRUE)
svyciprop(~I(nhanes$sodium==1), design = design, na.rm=TRUE)
svyciprop(~I(sodium==1), design = design, na.rm=TRUE)
